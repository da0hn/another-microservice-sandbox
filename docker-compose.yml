version: '3.8'
services:
  auth-db:
    container_name: auth-db
    image: postgres:11-alpine3.15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth-db
    ports:
      - '35432:5432'
    restart: always
    volumes:
      - .docker/auth-db:/var/lib/postgresql/data
    networks:
      - microservice-network
  product-db:
    container_name: product-db
    image: postgres:11-alpine3.15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: product-db
    ports:
      - '35433:5432'
    restart: always
    volumes:
      - .docker/product-db:/var/lib/postgresql/data
    networks:
      - microservice-network
  sales-db:
    image: mongo:latest
    container_name: sales-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - .docker/sales-db:/data/db
    ports:
      - '27017:27017'
    networks:
      - microservice-network
    restart: always
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=sales-db
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_BASICAUTH_USERNAME=user
      - ME_CONFIG_BASICAUTH_PASSWORD=user
    links:
      - sales-db
    volumes:
      - .docker/mongo-express:/data/db
    depends_on:
      - sales-db
    networks:
      - microservice-network
    ports:
      - '8000:8000'
    restart: always
  queue:
    image: rabbitmq:3-management
    container_name: queue
    hostname: queue
    ports:
      - '5672:5672'
      - '25676:25676'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: root
    networks:
      - microservice-network
  auth-api:
    build: './auth-api'
    container_name: auth-api
    environment:
      - PORT=8082
    ports:
      - '8082:8082'
    networks:
      - microservice-network
  sales-api:
    build: './sales-api'
    container_name: sales-api
    environment:
      - PORT=8081
    ports:
      - '8081:8081'
    networks:
      - microservice-network
  product-api:
    build: './product-api'
    container_name: product-api
    environment:
      - PORT=8080
    ports:
      - '8080:8080'
    networks:
      - microservice-network
networks:
  microservice-network:
    driver: bridge
    name: microservice-network
